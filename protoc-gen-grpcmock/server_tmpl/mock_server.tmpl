// Code generated by protoc-gen-grpcmock. DO NOT EDIT.

package {{ .GoPackageName }}

{{ range $svc := .Services }}
type {{ $svc.GoName }}MockServer struct {
	mocker *mocker.Mocker
}

type {{ $svc.GoName }}MockServerConfigurer struct {
	mocker *mocker.Mocker
}

func New{{ $svc.GoName }}MockServer() (*{{ $svc.GoName }}MockServer, error) {
    return &{{ $svc.GoName }}MockServer{mocker: mocker.NewMocker()}, nil
}

func New{{ $svc.GoName }}MockServerT(t *testing.T) *{{ $svc.GoName }}MockServer {
    srv, err := New{{ $svc.GoName }}MockServer()
    if err != nil {
        t.Fatal(err)
    }
    srv.mocker.SetT(t)
    return srv
}

// Torq grpc server support addition
func (m *{{ $svc.GoName }}MockServer) RegisterGRPC(srv *grpc.Server) error {
	Register{{ $svc.GoName }}Server(srv, m)
	return nil
}

// For Torq grpc server authentication middleware
func (m *{{ $svc.GoName }}MockServer)  IsAuthenticationRequired(path string) bool {
    return false
}

func (m *{{ $svc.GoName }}MockServer) ResetAll() {
    m.mocker.ResetAll()
}

func (m *{{ $svc.GoName }}MockServer) Configure() {{ $svc.GoName }}MockServerConfigurer {
	return {{ $svc.GoName }}MockServerConfigurer{mocker: m.mocker}
}

{{ range $method := $svc.Methods }}
type _{{ $svc.GoName }}_{{ $method.GoName }}Configurer struct {
	mocker *mocker.Mocker
}
func (mr {{ $svc.GoName }}MockServerConfigurer) {{ $method.GoName }}() _{{ $svc.GoName }}_{{ $method.GoName }}Configurer {
	return _{{ $svc.GoName }}_{{ $method.GoName }}Configurer{mocker: mr.mocker}
}

func (mg _{{ $svc.GoName }}_{{ $method.GoName }}Configurer) DefaultReturn(res *{{ qualifiedIdent $method.Output.GoIdent }}, err error) {
	mg.mocker.SetDefaultCall("{{ $method.GoName }}", []any{res, err})
}
func (mg _{{ $svc.GoName }}_{{ $method.GoName }}Configurer) DeleteDefault() {
	mg.mocker.UnsetDefaultCall("{{ $method.GoName }}")
}
func (mg _{{ $svc.GoName }}_{{ $method.GoName }}Configurer) TimesCalled() int {
	return mg.mocker.GetCallCount("{{ $method.GoName }}")
}
func (mg _{{ $svc.GoName }}_{{ $method.GoName }}Configurer) Reset() {
	mg.mocker.ResetCall("{{ $method.GoName }}")
}

type _{{ $svc.GoName }}_{{ $method.GoName }}ResponseRecorder struct {
	mocker *mocker.Mocker
	args   []any
}
func (mg _{{ $svc.GoName }}_{{ $method.GoName }}Configurer) On(ctx, req any) _{{ $svc.GoName }}_{{ $method.GoName }}ResponseRecorder {
	return _{{ $svc.GoName }}_{{ $method.GoName }}ResponseRecorder{mocker: mg.mocker, args: []any{ctx, req}}
}
func (mrr _{{ $svc.GoName }}_{{ $method.GoName }}ResponseRecorder) Return(res *{{ qualifiedIdent $method.Output.GoIdent }}, err error) *mocker.RegisteredCall {
	return mrr.mocker.AddExpectedCall("{{ $method.GoName }}", mrr.args, []any{res, err})
}

func (m *{{ $svc.GoName }}MockServer) {{ $method.GoName }}(ctx context.Context, req *{{ qualifiedIdent $method.Input.GoIdent }}) (*{{ qualifiedIdent $method.Output.GoIdent }}, error) {
    ret, err := m.mocker.Call("{{ $method.GoName }}", ctx, req)
    if err == nil && len(ret) != 2 {
        err = fmt.Errorf("unexpected number of return values. Expected %d return values, got %d", 2, len(ret))
    }
    if err != nil {
        m.mocker.LogError(err)
        return nil, status.Error(codes.Internal, err.Error())
    }

    res, _ := ret[0].(*{{ qualifiedIdent $method.Output.GoIdent }})
    err, _ = ret[1].(error)

    return res, err
}
{{- end }}
{{- end }}