// Code generated by protoc-gen-grpcmock. DO NOT EDIT.

package tests

import (
	context "context"
	"errors"
	fmt "fmt"
	"io"
	testing "testing"

	mocker "github.com/torqio/grpcmock/pkg/mocker"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

type ExampleServiceMockServer struct {
	mocker *mocker.Mocker
}

type ExampleServiceMockServerConfigurer struct {
	mocker *mocker.Mocker
}

func NewExampleServiceMockServer() (*ExampleServiceMockServer, error) {
	return &ExampleServiceMockServer{mocker: mocker.NewMocker()}, nil
}

func NewExampleServiceMockServerT(t *testing.T) *ExampleServiceMockServer {
	srv, err := NewExampleServiceMockServer()
	if err != nil {
		t.Fatal(err)
	}
	srv.mocker.SetT(t)
	return srv
}

// Torq grpc server support addition
func (m *ExampleServiceMockServer) RegisterGRPC(srv *grpc.Server) error {
	RegisterExampleServiceServer(srv, m)
	return nil
}

// For Torq grpc server authentication middleware
func (m *ExampleServiceMockServer) IsAuthenticationRequired(path string) bool {
	return false
}

func (m *ExampleServiceMockServer) ResetAll() {
	m.mocker.ResetAll()
}

func (m *ExampleServiceMockServer) Configure() ExampleServiceMockServerConfigurer {
	return ExampleServiceMockServerConfigurer{mocker: m.mocker}
}

type _ExampleService_ExampleMethodConfigurer struct {
	mocker *mocker.Mocker
}

func (mr ExampleServiceMockServerConfigurer) ExampleMethod() _ExampleService_ExampleMethodConfigurer {
	return _ExampleService_ExampleMethodConfigurer{mocker: mr.mocker}
}

func (mg _ExampleService_ExampleMethodConfigurer) DefaultReturn(res *ExampleMethodResponse, err error) {
	mg.mocker.SetDefaultCall("ExampleMethod", []any{res, err})
}
func (mg _ExampleService_ExampleMethodConfigurer) DeleteDefault() {
	mg.mocker.UnsetDefaultCall("ExampleMethod")
}
func (mg _ExampleService_ExampleMethodConfigurer) TimesCalled() int {
	return mg.mocker.GetCallCount("ExampleMethod")
}
func (mg _ExampleService_ExampleMethodConfigurer) Reset() {
	mg.mocker.ResetCall("ExampleMethod")
}

type _ExampleService_ExampleMethodResponseRecorder struct {
	mocker *mocker.Mocker
	args   []any
}

func (mg _ExampleService_ExampleMethodConfigurer) On(ctx, req any) _ExampleService_ExampleMethodResponseRecorder {
	return _ExampleService_ExampleMethodResponseRecorder{mocker: mg.mocker, args: []any{ctx, req}}
}
func (mrr _ExampleService_ExampleMethodResponseRecorder) Return(res *ExampleMethodResponse, err error) *mocker.RegisteredCall {
	return mrr.mocker.AddExpectedCallV2("ExampleMethod", mrr.args, []any{res, err})
}

func (m *ExampleServiceMockServer) ExampleMethod(ctx context.Context, req *ExampleMethodRequest) (*ExampleMethodResponse, error) {
	ret, err := m.mocker.Call("ExampleMethod", ctx, req)
	if err == nil && len(ret) != 2 {
		err = fmt.Errorf("unexpected number of return values. Expected %d return values, got %d", 2, len(ret))
	}
	if err != nil {
		m.mocker.LogError(err)
		return nil, status.Error(codes.Internal, err.Error())
	}

	res, _ := ret[0].(*ExampleMethodResponse)
	err, _ = ret[1].(error)

	return res, err
}

type _ExampleService_ExampleStreamResponseConfigurer struct {
	mocker *mocker.Mocker
}

func (mr ExampleServiceMockServerConfigurer) ExampleStreamResponse() _ExampleService_ExampleStreamResponseConfigurer {
	return _ExampleService_ExampleStreamResponseConfigurer{mocker: mr.mocker}
}

func (mg _ExampleService_ExampleStreamResponseConfigurer) DefaultReturn(res []*ExampleMethodResponse, err error) {
	anyRes := make([]any, len(res))
	for i, v := range res {
		anyRes[i] = v
	}
	mg.mocker.SetDefaultCall("ExampleStreamResponse", []any{anyRes, err})
}
func (mg _ExampleService_ExampleStreamResponseConfigurer) DeleteDefault() {
	mg.mocker.UnsetDefaultCall("ExampleStreamResponse")
}
func (mg _ExampleService_ExampleStreamResponseConfigurer) TimesCalled() int {
	return mg.mocker.GetCallCount("ExampleStreamResponse")
}
func (mg _ExampleService_ExampleStreamResponseConfigurer) Reset() {
	mg.mocker.ResetCall("ExampleStreamResponse")
}

type _ExampleService_ExampleStreamResponseResponseRecorder struct {
	mocker *mocker.Mocker
	args   []any
}

func (mg _ExampleService_ExampleStreamResponseConfigurer) On(req any) _ExampleService_ExampleStreamResponseResponseRecorder {
	return _ExampleService_ExampleStreamResponseResponseRecorder{mocker: mg.mocker, args: []any{req}}
}
func (mrr _ExampleService_ExampleStreamResponseResponseRecorder) Return(res []*ExampleMethodResponse, err error) *mocker.RegisteredCall {
	anyRes := make([]any, len(res))
	for i, v := range res {
		anyRes[i] = v
	}
	return mrr.mocker.AddExpectedCallV2("ExampleStreamResponse", mrr.args, []any{anyRes, err})
}

func (m *ExampleServiceMockServer) ExampleStreamResponse(req *ExampleMethodRequest, stream ExampleService_ExampleStreamResponseServer) error {
	ret, err := m.mocker.Call("ExampleStreamResponse", req)
	if err == nil && len(ret) != 2 {
		err = fmt.Errorf("unexpected number of return values. Expected %d return values to stream, got %d", 2, len(ret))
	}
	if err != nil {
		m.mocker.LogError(err)
		return status.Error(codes.Internal, err.Error())
	}

	results, _ := ret[0].([]*ExampleMethodResponse)
	err, _ = ret[1].(error)

	if err != nil {
		return err
	}

	for _, res := range results {
		if err := stream.Send(res); err != nil {
			return err
		}
	}

	return nil
}

type _ExampleService_ExampleStreamRequestConfigurer struct {
	mocker *mocker.Mocker
}

func (mr ExampleServiceMockServerConfigurer) ExampleStreamRequest() _ExampleService_ExampleStreamRequestConfigurer {
	return _ExampleService_ExampleStreamRequestConfigurer{mocker: mr.mocker}
}

func (mg _ExampleService_ExampleStreamRequestConfigurer) DefaultReturn(res *ExampleMethodResponse, err error) {
	mg.mocker.SetDefaultCall("ExampleStreamRequest", []any{res, err})
}
func (mg _ExampleService_ExampleStreamRequestConfigurer) DeleteDefault() {
	mg.mocker.UnsetDefaultCall("ExampleStreamRequest")
}
func (mg _ExampleService_ExampleStreamRequestConfigurer) TimesCalled() int {
	return mg.mocker.GetCallCount("ExampleStreamRequest")
}
func (mg _ExampleService_ExampleStreamRequestConfigurer) Reset() {
	mg.mocker.ResetCall("ExampleStreamRequest")
}

type _ExampleService_ExampleStreamRequestResponseRecorder struct {
	mocker *mocker.Mocker
	args   []any
}

func (mg _ExampleService_ExampleStreamRequestConfigurer) On(req any) _ExampleService_ExampleStreamRequestResponseRecorder {
	return _ExampleService_ExampleStreamRequestResponseRecorder{mocker: mg.mocker, args: []any{req}}
}
func (mrr _ExampleService_ExampleStreamRequestResponseRecorder) Return(res *ExampleMethodResponse, err error) *mocker.RegisteredCall {
	return mrr.mocker.AddExpectedCallV2("ExampleStreamRequest", mrr.args, []any{res, err})
}

func (m *ExampleServiceMockServer) ExampleStreamRequest(stream ExampleService_ExampleStreamRequestServer) error {
	for {
		msg, err := stream.Recv()
		if errors.Is(err, io.EOF) {
			break
		}
		if err != nil {
			err = fmt.Errorf("recv: %w", err)
			m.mocker.LogError(err)
			return status.Error(codes.Internal, err.Error())
		}

		ret, err := m.mocker.Call("ExampleStreamRequest", msg)
		if err == nil && len(ret) != 2 {
			err = fmt.Errorf("unexpected number of return values. Expected %d return values, got %d", 2, len(ret))
		}

		if err != nil {
			if errors.Is(err, mocker.ErrNoMatchingCalls{}) {
				continue
			}
			m.mocker.LogError(err)
			return status.Error(codes.Internal, err.Error())
		}

		res := ret[0].(*ExampleMethodResponse)
		err = ret[1].(error)

		if err != nil {
			return err
		}

		return stream.SendAndClose(res)
	}

	err := mocker.ErrNoMatchingCalls{"ExampleStreamRequest"}
	m.mocker.LogError(err)
	return status.Error(codes.NotFound, err.Error())
}

type _ExampleService_ExampleStreamRequestResponseConfigurer struct {
	mocker *mocker.Mocker
}

func (mr ExampleServiceMockServerConfigurer) ExampleStreamRequestResponse() _ExampleService_ExampleStreamRequestResponseConfigurer {
	return _ExampleService_ExampleStreamRequestResponseConfigurer{mocker: mr.mocker}
}

func (mg _ExampleService_ExampleStreamRequestResponseConfigurer) DefaultReturn(res []*ExampleMethodResponse, err error) {
	mg.mocker.SetDefaultCall("ExampleStreamRequestResponse", []any{res, err})
}
func (mg _ExampleService_ExampleStreamRequestResponseConfigurer) DeleteDefault() {
	mg.mocker.UnsetDefaultCall("ExampleStreamRequestResponse")
}
func (mg _ExampleService_ExampleStreamRequestResponseConfigurer) TimesCalled() int {
	return mg.mocker.GetCallCount("ExampleStreamRequestResponse")
}
func (mg _ExampleService_ExampleStreamRequestResponseConfigurer) Reset() {
	mg.mocker.ResetCall("ExampleStreamRequestResponse")
}

type _ExampleService_ExampleStreamRequestResponseResponseRecorder struct {
	mocker *mocker.Mocker
	args   []any
}

func (mg _ExampleService_ExampleStreamRequestResponseConfigurer) On(req any) _ExampleService_ExampleStreamRequestResponseResponseRecorder {
	return _ExampleService_ExampleStreamRequestResponseResponseRecorder{mocker: mg.mocker, args: []any{req}}
}
func (mrr _ExampleService_ExampleStreamRequestResponseResponseRecorder) Return(res []*ExampleMethodResponse, err error) *mocker.RegisteredCall {
	anyRes := make([]any, len(res))
	for i, v := range res {
		anyRes[i] = v
	}
	return mrr.mocker.AddExpectedCallV2("ExampleStreamRequestResponse", mrr.args, []any{anyRes, err})
}

func (m *ExampleServiceMockServer) ExampleStreamRequestResponse(stream ExampleService_ExampleStreamRequestResponseServer) error {
	found := false

	for {
		msg, err := stream.Recv()
		if errors.Is(err, io.EOF) {
			break
		}
		if err != nil {
			err = fmt.Errorf("recv: %w", err)
			m.mocker.LogError(err)
			return status.Error(codes.Internal, err.Error())
		}

		ret, err := m.mocker.Call("ExampleStreamRequestResponse", msg)
		if err == nil && len(ret) != 2 {
			err = fmt.Errorf("unexpected number of return values. Expected %d return values, got %d", 2, len(ret))
		}

		if err != nil {
			if errors.Is(err, mocker.ErrNoMatchingCalls{}) {
				continue
			}
			m.mocker.LogError(err)
			return status.Error(codes.Internal, err.Error())
		}

		results, _ := ret[0].([]*ExampleMethodResponse)
		err, _ = ret[1].(error)

		if err != nil {
			return err
		}

		for _, res := range results {
			if err := stream.Send(res); err != nil {
				return err
			}
		}
		found = true
	}

	if found {
		err := mocker.ErrNoMatchingCalls{"ExampleStreamRequestResponse"}
		m.mocker.LogError(err)
		return status.Error(codes.NotFound, err.Error())
	}
	return nil
}
